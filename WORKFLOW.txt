
1.1) Korenovy element = xzep:DataEnvelope
1.2) Obsahuje atributy xmlns:xzep & xmlns:ds
1.3) Obsahuje podelement ds:Signature, ktory ma atributy Id & xmlns:ds
1.4) ds:Signature ma neprazdny podelement ds:SignatureValue a ten ma atribut Id
1.5) xmlns:xzep="http://www.ditec.sk/ep/signature_formats/xades_zep/v1.0"
1.6) xmlns:ds="http://www.w3.org/2000/09/xmldsig#"

=============================

2.1) XML obsahuje elementy ds:SignatureMethod & ds:CanonicalizationMethod, ktore su podelementami
    ds:Signature => ds:SignedInfo
    2.1.1) Maju atribut Algorithm a ten obsahuje validnu URI
    2.1.2) Validne URIs pre SignatureMethod:
        - http://www.w3.org/2000/09/xmldsig#dsa-sha1
        - http://www.w3.org/2000/09/xmldsig#rsa-sha1
        - http://www.w3.org/2001/04/xmldsig-more#rsa-sha256
        - http://www.w3.org/2001/04/xmldsig-more#rsa-sha384
        - http://www.w3.org/2001/04/xmldsig-more#rsa-sha512
    2.1.3) Validne URIs pre CanonicalizationMethod:
        -  http://www.w3.org/TR/2001/REC-xml-c14n-20010315

=============================

2.3) foreach ds:Reference in ds:SignedInfo
    2.3.1) Maju podelementy ds:Transforms &Â ds:DigestMethod
    2.3.2) ds:Transforms ma podelement ds:Transform
    2.3.3) ds:Transform ma atribut Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"
    2.3.4) ds:DigestMethod ma atribut Algorithm a jeho hodnota je niektora z validnych URIs pre SignatureMethod
        2.3.5.1) Ak URI zacina s "#", overit, ze element existuje v XML, inak ziskat jeho hodnotu a validovat, ze je to XML
        2.3.5.2) Element, na ktory ukazuje URI moze byt:
            - 1x ds:KeyInfo - REQUIRED
            - 1x ds:SignatureProperties - REQUIRED
            - 1x xades:SignedProperties - REQUIRED
            - Nx element typu ds:Manifest
            - inak FAIL
        2.3.5.2) Kanonikalizacia elementu pomocou bcCrypto
        2.3.5.3) Zahashovanie kanonikalizovanej formy pomocou algoritmu v ds:DigestMethod - bcCrypto
        2.3.5.4) Vysledok hashovania == ds:DigestValue - inak FAIL

=============================

2.4.1) v ds:Signature existuje element ds:KeyInfo a ten ma atribut Id
    2.4.2.1) v ds:Signature existuje element ds:SignatureProperties a ma atribut Id
    2.4.2.2) obsahuje 2 podelementy s nazvom ds:SignatureProperty, ktore maju atribut Target
        2.4.2.2.1) atribut Target musi byt UID, ktore je odkaz na element ds:Signature
    2.4.2.3) element SignatureProperty moze obsahovat podelement:
        - xzep:SignatureVersion - REQUIRED, UNIQUE
        - xzep:ProductInfos - REQUIRED, UIQUE
        (v jednom z nich musi byt jeden, v druhom druhy)
    2.4.3.1) obsahuje element ds:X509Data
        2.4.3.1.1) obsahuje podelementy:
            - ds:X509Certificate
            - ds:X509IssuerSerial
            - ds:X509SubjectName
    2.4.4.1) Pomocou bcCrypto vytiahnem z elementu ds:X509Certificate:
        - IssuerCertificate
        - SubjectName
    2.4.4.2) Hodnoty elementov porovnam s ds:X509IssuerSerial & ds:X509SubjectName
2.4.5) Kanonikalizacia elementu ds:SignedInfo pomocou bcCrypto
2.4.6) Z ds:KeyInfo => ds:X509Data => ds:X509Certificate pomocou bcCrypto ziskam PublicKey certifikatu
2.4.7) Pomocou PublicKey zakodujem RSAckom kanonikalizovanu formu ds:SignedInfo
2.4.8) Vysledok == hodnota v ds:SignatureValue - inak FAIL

=============================

2.5) foreach ds:Manifest in LAST ds:Object in ds:Signature